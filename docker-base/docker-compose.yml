version: '3.7'
services:
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  # message broker between services
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  amqp:
    image: rabbitmq:3.8.4
    container_name: rabbitmq_container
    hostname: amqp
    volumes:
      - './rabbitmq/data/:/var/lib/rabbitmq/'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
# hashing ports for security to not expose message broker to public network
#    ports:
#      - '5672:5672'
#      - '15672:15672'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chat-proxy
    restart: always
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  # PHP web server
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  webserver:
    image: nginx:alpine
    container_name: nginx_container
    hostname: nginx
    volumes:
      - '../users-service:/var/www/'
      - ./nginx/conf.d/:/etc/nginx/conf.d/
# hashing ports for security to not expose to public network
#    ports:
#      - "${WEB_SERVER_PORT}:80"
    depends_on:
      - users
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chat-proxy
    restart: always
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  # Databases
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  #######################################
  # mongodb used for chat saving
  #######################################
  mongodb:
    image: 'mongo:4.2.1-bionic'
    container_name: mongodbdb_container
    hostname: mongodb
    volumes:
      - 'mongodb-volume:/data/db'
# ports are not hashed for development purposes only but, not exposed on production
    ports:
      - '27017:27017'
    networks:
      - chat-proxy
    restart: always
  #######################################
  # mysql db used for users
  #######################################
  mysql:
    image: 'mysql:5.6'
    container_name: mysqldb_container
    hostname: mysql
    command: '--default-authentication-plugin=mysql_native_password'
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASS: ${DB_PASSWORD}
    entrypoint:
      sh -c
      " echo 'CREATE DATABASE IF NOT EXISTS ${DB_DATABASE};
      CREATE DATABASE IF NOT EXISTS ${AUTH_DB_DATABASE};'
      > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci "
    volumes:
      - 'mysqldb-volume:/var/lib/mysql'
# ports are not hashed for development purposes only but, not exposed on production
    ports:
      - '3306:3306'
    networks:
      - chat-proxy
    restart: always
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  # backend services
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  #######################################
  # chat service
  #######################################
  chat:
    container_name: chatting_container
    hostname: chat
    build:
      context: ../chat-engine
      dockerfile: Dockerfile.dev
    image: chat_image
    volumes:
      - '../chat-engine/src:/usr/service/src'
# hashing ports for security to not expose to public network
#    ports:
#      - '${SOCKET_IO_PORT}:${SOCKET_IO_PORT}'
    environment:
      - 'NODE_ENV=${NODE_ENV}'
      - 'SOCKET_IO_PORT=${SOCKET_IO_PORT}'
      - 'RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}'
      - 'RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}'
      - 'RABBITMQ_URI=${RABBITMQ_URI}'
    depends_on:
      - amqp
    restart: always
    networks:
      - chat-proxy
  #######################################
  # chat db interactions service
  #######################################
  chat-db-interactions:
    container_name: chat-db-interactions_container
    hostname: chat-db-interactions
    build:
      context: ../chat-db-interactions
      dockerfile: Dockerfile.dev
    image: chat-db-interactions_image
    volumes:
      - '../chat-db-interactions/src:/usr/service/src'
# hashing ports for security to not expose to public network
#    ports:
#      - "${CHAT_DB_INTERACTIONS_PORT}:${CHAT_DB_INTERACTIONS_PORT}"
    environment:
      - 'NODE_ENV=${NODE_ENV}'
      - 'PORT=${CHAT_DB_INTERACTIONS_PORT}'
      - 'RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}'
      - 'RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}'
      - 'RABBITMQ_URI=${RABBITMQ_URI}'
      - 'MONGODB_URI=${MONGODB_URI}'
    depends_on:
      - amqp
      - mongodb
    restart: always
    networks:
      - chat-proxy
  #######################################
  # user service
  #######################################
  users:
    container_name: chat-users_container
    hostname: users
    build:
      context: ../users-service
      dockerfile: Dockerfile.dev
    image: users_image
    volumes:
      - '../users-service:/var/www/'
    environment:
      - 'APP_NAME=${USERS_APP_NAME}'
      - 'APP_ENV=${USERS_APP_ENV}'
      - 'APP_KEY=${USERS_APP_KEY}'
      - 'APP_DEBUG=${USERS_APP_DEBUG}'
      - 'APP_URL=${USERS_APP_URL}'
      - 'APP_TIMEZONE=${USERS_APP_TIMEZONE}'
      - 'LOG_CHANNEL=${USERS_LOG_CHANNEL}'
      - 'LOG_SLACK_WEBHOOK_URL=${USERS_LOG_SLACK_WEBHOOK_URL}'
      - 'DB_CONNECTION=${DB_CONNECTION}'
      - 'DB_HOST=${DB_HOST}'
      - 'DB_PORT=${DB_PORT}'
      - 'DB_DATABASE=${DB_DATABASE}'
      - 'DB_USERNAME=${DB_USERNAME}'
      - 'DB_PASSWORD=${DB_PASSWORD}'
      - 'CACHE_DRIVER=${USERS_CACHE_DRIVER}'
      - 'QUEUE_CONNECTION=${USERS_QUEUE_CONNECTION}'
    depends_on:
      - mysql
    networks:
      - chat-proxy
    restart: always
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  # frontend services
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  frontend:
    container_name: chat-front_container
    hostname: frontend
    build:
      context: ../frontEnd
      dockerfile: Dockerfile.dev
    image: frontend_image
    volumes:
      - '../frontEnd/public:/usr/service/public'
      - '../frontEnd/src:/usr/service/src'
    ports:
      - '${REACT_PORT}:${REACT_PORT}'
    environment:
      - 'NODE_ENV=${NODE_ENV}'
      - 'PORT=${REACT_PORT}'
      - 'SKIP_PREFLIGHT_CHECK=${SKIP_PREFLIGHT_CHECK}'
      - 'REACT_APP_ENVIRONMENT=${NODE_ENV}'
      - 'REACT_APP_SOCKET_URI=${REACT_APP_SOCKET_URI}'
      - 'REACT_APP_API_GATEWAY=${REACT_APP_API_GATEWAY}'
    depends_on:
      - chat
      - users
    networks:
      - chat-proxy
    restart: always
  #######################################
  # kong gateway
  #######################################
  kong:
    container_name: kong-gateway_container
    hostname: kong
    image: kong:2.0.4-ubuntu
    ports:
      - "${KONG_PORT}:8000"
#      - "8001:8001" #admin port to manipulate kong, hashed to secure kong admin apis
      - "8443:8443" #https ports
#      - "8444:8444" #https admin ports
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: kong-db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_DB}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_DB_USER}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: /config/kong.yml
    depends_on:
      - chat-db-interactions
      - chat
      - users
      - kong-db
    networks:
      - chat-proxy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
  #######################################
  # kong database
  #######################################
  kong-db:
    container_name: kong-db_container
    image: postgres:9.6
    hostname: kong-db
    environment:
      POSTGRES_DB: ${KONG_DB}
      POSTGRES_USER: ${KONG_DB_USER}
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_DB_USER}", "-d", "${KONG_DB}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always
    stdin_open: true
    tty: true
    networks:
      - chat-proxy
    volumes:
      - kong_data:/var/lib/postgresql/data
  #######################################
  # kong database migration
  #######################################
  kong-migrations:
    image: kong:2.0.4-ubuntu
    container_name: kong-migrations_container
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_DB}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_DB_USER}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
    networks:
      - chat-proxy
    restart: on-failure
  #######################################
  # kong database migration up
  #######################################
  kong-migrations-up:
    image: kong:2.0.4-ubuntu
    container_name: kong-migrations-up_container
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_DB}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_DB_USER}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
    networks:
      - chat-proxy
    restart: on-failure
  #######################################
  # konga (kong GUI Admin service kong apis cli) preparation
  #######################################
  konga-prepare:
    image: pantsel/konga:latest
    container_name: konga-prepare_container
    command: "-c prepare -a postgres -u postgresql://${KONG_DB_USER}:${KONG_DB_PASSWORD}@kong-db:5432/${KONGA_DB}"
    networks:
      - chat-proxy
    restart: on-failure
    depends_on:
      - kong-db
  #######################################
  # konga (kong GUI Admin service kong apis cli)
  #######################################
  konga-admin:
    image: pantsel/konga:latest
    container_name: konga-admin_container
    depends_on:
      - kong-db
      - konga-prepare
    ports:
      - "1337:1337"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-db
      DB_DATABASE: ${KONGA_DB}
      DB_USER: ${KONG_DB_USER}
      DB_PASSWORD: ${KONG_DB_PASSWORD}
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      NODE_ENV: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - chat-proxy
    restart: always
  #######################################
  # keyCloak for authentication/authorization
  #######################################
  keycloak-db:
    image: postgres:9.6
    container_name: keycloak-db_container
    hostname: keycloak-db
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    networks:
      - chat-proxy
    environment:
      POSTGRES_DB:       ${KEYCLOAK_DB}
      POSTGRES_USER:     ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}

  keycloak:
    image: jboss/keycloak:10.0.2
    container_name: keycloak_container
    depends_on:
      - keycloak-db
    networks:
      - chat-proxy
    ports:
      - "8180:8080"
    environment:
      DB_VENDOR:   POSTGRES
      DB_ADDR:     keycloak-db
      DB_PORT:     5432
      DB_DATABASE:  ${KEYCLOAK_DB}
      DB_USER:     ${KEYCLOAK_DB_USER}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_USER:     ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
  #######################################
  #auth service
  #######################################
  authentication-service:
    container_name: auth-service_container
    hostname: auth-service
    build:
      context: ../authentication-service
      dockerfile: Dockerfile.dev
    image: auth-service_image
    volumes:
      - '../authentication-service/src:/usr/service/src'
# hashing ports for security to not expose to public network
#    ports:
#      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      - 'NODE_ENV=${NODE_ENV}'
      - 'PORT=${AUTH_SERVICE_PORT}'
      - 'DB_CONNECTION=${DB_CONNECTION}'
      - 'DB_HOST=${DB_HOST}'
      - 'DB_PORT=${DB_PORT}'
      - 'DB_DATABASE=${AUTH_DB_DATABASE}'
      - 'DB_USERNAME=${DB_USERNAME}'
      - 'DB_PASSWORD=${DB_PASSWORD}'
      - 'AUTH_WEBSERVER_URL=${AUTH_WEBSERVER_URL}'
      - 'AUTH_GATEWAY_URL=${AUTH_GATEWAY_URL}'
    depends_on:
      - amqp
      - mysql
    restart: always
    networks:
      - chat-proxy

volumes:
  mongodb-volume:
  mysqldb-volume:
  nginx-volume:
  kong_data:
  keycloak-data:

networks:
  chat-proxy:
    driver: bridge